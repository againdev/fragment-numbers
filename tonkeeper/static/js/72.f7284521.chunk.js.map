{"version":3,"file":"static/js/72.f7284521.chunk.js","mappings":"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","sources":["../../../packages/core/dist/entries/nft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useAreNftActionsDisabled.js","../../../packages/uikit/dist/hooks/blockchain/useEstimateTonFee.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftLink.js","../../../packages/uikit/dist/hooks/blockchain/useExecuteTonContract.js","../../../packages/uikit/dist/hooks/blockchain/nft/useLinkNft.js","../../../packages/uikit/dist/hooks/blockchain/useTonRecipient.js","../../../packages/uikit/dist/hooks/useNotification.js","../../../packages/uikit/dist/hooks/useQueryChangeWait.js","../../../packages/uikit/dist/components/nft/LinkNft.js","../../../packages/uikit/dist/components/nft/RenewNft.js","../../../packages/uikit/dist/hooks/blockchain/nft/useEstimateNftRenew.js","../../../packages/uikit/dist/hooks/blockchain/nft/useRenewNft.js","../../../packages/uikit/dist/components/nft/NftAction.js","../../../packages/uikit/dist/components/nft/NftDetails.js","../../../packages/uikit/dist/components/nft/NftView.js","../../../packages/uikit/dist/components/nft/NftNotification.js","../../../packages/uikit/dist/components/nft/Nfts.js","../../../packages/uikit/dist/hooks/dateFormat.js"],"sourcesContent":["export function isNFTDNS(nft) {\n    return !!nft.dns;\n}\n","import { seeIfAddressEqual } from '@tonkeeper/core/dist/utils/common';\nimport { useActiveWallet } from '../../../state/wallet';\nexport function useAreNftActionsDisabled(nft) {\n    const wallet = useActiveWallet();\n    return nft.sale !== undefined || !seeIfAddressEqual(wallet.rawAddress, nft.owner?.address);\n}\n","import { useQuery } from '@tanstack/react-query';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { EmulationApi } from '@tonkeeper/core/dist/tonApiV2';\nimport { useActiveAccount } from '../../state/wallet';\nimport { useAppContext } from '../appContext';\nimport { isAccountTonWalletStandard } from '@tonkeeper/core/dist/entries/account';\nexport function useEstimateTonFee({ caller, queryKey, options }, args) {\n    const { api } = useAppContext();\n    const account = useActiveAccount();\n    return useQuery(queryKey, async () => {\n        if (!isAccountTonWalletStandard(account)) {\n            throw new Error('account not controllable');\n        }\n        const boc = await caller({\n            ...args,\n            walletState: account.activeTonWallet,\n            api\n        });\n        const { event } = await new EmulationApi(api.tonApiV2).emulateMessageToWallet({\n            emulateMessageToWalletRequest: { boc }\n        });\n        const fee = new AssetAmount({\n            asset: TON_ASSET,\n            weiAmount: event.extra * -1\n        });\n        return { fee, payload: { event } };\n    }, \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    options);\n}\n","import { estimateNftLink } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useEstimateTonFee } from '../useEstimateTonFee';\nexport const useEstimateNftLink = (args) => {\n    return useEstimateTonFee({\n        caller: estimateNftLink,\n        queryKey: ['estimate-link-nft', args.nftAddress, args.linkToAddress]\n    }, args);\n};\n","import { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { notifyError } from '../../components/transfer/common';\nimport { getSigner } from '../../state/mnemonic';\nimport { useCheckTouchId } from '../../state/password';\nimport { useActiveAccount, useInvalidateActiveWalletQueries } from '../../state/wallet';\nimport { useTransactionAnalytics } from '../amplitude';\nimport { useAppContext } from '../appContext';\nimport { useAppSdk } from '../appSdk';\nimport { useTranslation } from '../translation';\nimport { isAccountTonWalletStandard } from '@tonkeeper/core/dist/entries/account';\nexport function useExecuteTonContract({ executor, eventName2 }, args) {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    const { api } = useAppContext();\n    const account = useActiveAccount();\n    const client = useQueryClient();\n    const track2 = useTransactionAnalytics();\n    const { mutateAsync: checkTouchId } = useCheckTouchId();\n    const { mutateAsync: invalidateAccountQueries } = useInvalidateActiveWalletQueries();\n    return useMutation(async () => {\n        if (!isAccountTonWalletStandard(account)) {\n            return false;\n        }\n        if (!args.fee) {\n            return false;\n        }\n        const signer = await getSigner(sdk, account.id, checkTouchId).catch(() => null);\n        if (signer === null)\n            return false;\n        track2(eventName2);\n        try {\n            await executor({\n                api,\n                account,\n                signer,\n                ...args\n            });\n        }\n        catch (e) {\n            await notifyError(client, sdk, t, e);\n        }\n        await invalidateAccountQueries();\n        await client.invalidateQueries();\n        return true;\n    });\n}\n","import { sendNftLink } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useExecuteTonContract } from '../useExecuteTonContract';\nexport const useLinkNft = (args) => useExecuteTonContract({ executor: sendNftLink, eventName2: 'link-dns' }, args);\n","import { BLOCKCHAIN_NAME } from '@tonkeeper/core/dist/entries/crypto';\nimport { formatAddress } from '@tonkeeper/core/dist/utils/common';\nimport { useEffect, useMemo, useRef } from 'react';\nimport { useGetToAccount } from '../../components/transfer/RecipientView';\nimport { useActiveTonNetwork } from '../../state/wallet';\nexport function useTonRecipient(address) {\n    const network = useActiveTonNetwork();\n    const isFirstRender = useRef(true);\n    const { isLoading, data: toAccount, mutate: mutateRecipient } = useGetToAccount();\n    useEffect(() => {\n        isFirstRender.current = false;\n        mutateRecipient({ address });\n    }, [address]);\n    const recipient = useMemo(() => ({\n        address: {\n            address: formatAddress(address, network, true),\n            blockchain: BLOCKCHAIN_NAME.TON\n        },\n        comment: '',\n        done: false,\n        toAccount: toAccount\n    }), [toAccount, network]);\n    return {\n        recipient,\n        isLoading: isFirstRender.current ? true : isLoading\n    };\n}\n","import { notifyError } from '../components/transfer/common';\nimport { useTranslation } from './translation';\nimport { useAppSdk } from './appSdk';\nimport { useQueryClient } from '@tanstack/react-query';\nexport function useNotification() {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    const client = useQueryClient();\n    return (e) => notifyError(client, sdk, t, e);\n}\n","import { useEffect, useRef, useState } from 'react';\nexport function useQueryChangeWait(query, shouldExit) {\n    const [isLoading, setIsLoading] = useState(false);\n    const [isCompleted, setIsCompleted] = useState(false);\n    const [dispose, setDispose] = useState(false);\n    const prev = useRef(query.data);\n    const waitRecursive = async () => {\n        const result = await query.refetch();\n        if (dispose) {\n            setIsLoading(false);\n        }\n        if (shouldExit(result.data, prev.current)) {\n            setIsLoading(false);\n            setIsCompleted(true);\n            return;\n        }\n        prev.current = result.data;\n        setTimeout(waitRecursive, 1000);\n    };\n    useEffect(() => () => setDispose(true), []);\n    return {\n        isLoading,\n        isCompleted,\n        data: query.data,\n        refetch: (timeLimit = 10000) => {\n            prev.current = query.data;\n            setIsLoading(true);\n            setDispose(false);\n            setIsCompleted(false);\n            setTimeout(() => {\n                if (isLoading) {\n                    setDispose(true);\n                }\n            }, timeLimit);\n            waitRecursive();\n        }\n    };\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { isStandardTonWallet } from '@tonkeeper/core/dist/entries/wallet';\nimport { getWalletsAddresses } from '@tonkeeper/core/dist/service/walletService';\nimport { unShiftedDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport { areEqAddresses, formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport { isTMEDomain } from '@tonkeeper/core/dist/utils/nft';\nimport BigNumber from 'bignumber.js';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useToast } from '../../hooks/appSdk';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftLink } from '../../hooks/blockchain/nft/useEstimateNftLink';\nimport { useLinkNft } from '../../hooks/blockchain/nft/useLinkNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { useTranslation } from '../../hooks/translation';\nimport { useNotification } from '../../hooks/useNotification';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useActiveTonNetwork, useActiveWallet } from '../../state/wallet';\nimport { ColumnText, Gap } from '../Layout';\nimport { ListItem, ListItemPayload } from '../List';\nimport { Notification, NotificationBlock } from '../Notification';\nimport { Body1, Body2 } from '../Text';\nimport { Label } from '../activity/NotificationCommon';\nimport { Button } from '../fields/Button';\nimport { Input } from '../fields/Input';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot, ConfirmViewDetailsAmount, ConfirmViewDetailsFee, ConfirmViewDetailsSlot, ConfirmViewHeadingSlot, ConfirmViewTitleSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nimport { useNftDNSLinkData } from '../../state/nft';\nexport const LinkNft = ({ nft }) => {\n    const toast = useToast();\n    const { t } = useTranslation();\n    const query = useNftDNSLinkData(nft);\n    const { data, isLoading } = query;\n    const linkedAddress = data?.wallet?.address || '';\n    const { refetch, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => !!prev?.wallet?.address !== !!current?.wallet?.address);\n    useEffect(() => {\n        if (isCompleted) {\n            toast(linkedAddress ? t('dns_address_linked') : t('dns_address_unlinked'));\n        }\n    }, [isCompleted, linkedAddress]);\n    if (!linkedAddress) {\n        return (_jsx(LinkNftUnlinked, { nft: nft, isLoading: isLoading || isWaitingForUpdate, refetch: refetch }));\n    }\n    return (_jsx(LinkNftLinked, { nft: nft, linkedAddress: linkedAddress, isLoading: isWaitingForUpdate, refetch: refetch }));\n};\nconst ReplaceButton = styled(Body2) `\n    cursor: pointer;\n    color: ${props => (!props.isDisabled ? props.theme.textAccent : props.theme.textSecondary)};\n    pointer-events: ${props => (props.isDisabled ? 'none' : 'unset')};\n`;\nconst dnsLinkAmount = new BigNumber(0.02);\nconst dnsLinkAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: dnsLinkAmount\n});\nconst LinkNftUnlinked = ({ nft, isLoading, refetch }) => {\n    const notifyError = useNotification();\n    const { t } = useTranslation();\n    const [openedView, setOpenedView] = useState();\n    const walletState = useActiveWallet();\n    const [linkToAddress, setLinkToAddress] = useState(walletState.rawAddress);\n    const onClose = (confirm) => {\n        if (openedView === 'wallet') {\n            return setOpenedView('confirm');\n        }\n        setOpenedView(undefined);\n        if (confirm) {\n            refetch();\n        }\n        else {\n            setLinkToAddress(walletState.rawAddress);\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const { refetch: refetchEstimateFee, ...estimation } = useEstimateNftLink({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress\n    });\n    const onSaveLinkToAddress = useCallback(async (address) => {\n        setLinkToAddress(address);\n        await refetchEstimateFee();\n        setOpenedView('confirm');\n    }, [refetchEstimateFee, nft.address]);\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress,\n        fee: estimation.data?.payload\n    });\n    const isSelectedCurrentAddress = areEqAddresses(linkToAddress, walletState.rawAddress);\n    const network = useActiveTonNetwork();\n    const confirmChild = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(Label, { children: isSelectedCurrentAddress\n                                        ? t('dns_current_address')\n                                        : t('wallet_address') }), _jsx(ColumnText, { right: true, text: toShortValue(formatAddress(linkToAddress, network)), secondary: _jsx(ReplaceButton, { isDisabled: mutation.isLoading, onClick: () => setOpenedView('wallet'), children: t('replace') }) })] }) }), _jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const chooseWalletChild = useCallback(() => (_jsx(LinkNFTWalletView, { onSave: onSaveLinkToAddress, isLoading: estimation.isFetching, domain: nft.dns })), [onSaveLinkToAddress, estimation.isFetching]);\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setOpenedView('confirm');\n    };\n    const isTME = isTMEDomain(nft.dns);\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: isTME ? t('nft_link_username_button') : t('nft_link_domain_button') }), _jsx(Notification, { title: openedView === 'wallet'\n                    ? t('wallet_address')\n                    : t('send_screen_steps_comfirm_title'), isOpen: !!openedView, hideButton: true, handleClose: () => onClose(), backShadow: true, children: openedView === 'wallet' ? chooseWalletChild : confirmChild })] }));\n};\nconst WalletLabelStyled = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n    margin-bottom: 1.5rem;\n`;\nconst ChangeWalletContainerStyled = styled(NotificationBlock) `\n    align-items: flex-start;\n`;\nconst LinkNFTWalletView = ({ onSave, isLoading, domain }) => {\n    const { t } = useTranslation();\n    const [inputValue, setInputValue] = useState('');\n    const [wasSubmitted, setWasSubmitted] = useState(false);\n    const isInputValid = useMemo(() => {\n        if (!wasSubmitted) {\n            return true;\n        }\n        try {\n            Address.parse(inputValue);\n            return true;\n        }\n        catch {\n            return false;\n        }\n    }, [wasSubmitted, inputValue]);\n    const onSubmit = e => {\n        e.stopPropagation();\n        e.preventDefault();\n        setWasSubmitted(true);\n        try {\n            onSave(Address.parse(inputValue).toRawString());\n        }\n        catch (err) {\n            console.error(err);\n        }\n    };\n    return (_jsxs(ChangeWalletContainerStyled, { onSubmit: onSubmit, children: [_jsx(WalletLabelStyled, { children: t('add_dns_address').replace('%1%', domain) }), _jsx(Input, { disabled: isLoading, isValid: isInputValid, value: inputValue, onChange: setInputValue, label: t('wallet_address'), clearButton: true }), _jsx(Gap, {}), _jsx(Button, { fullWidth: true, size: \"large\", primary: true, disabled: !inputValue, loading: isLoading, children: \"Save\" })] }));\n};\nconst WarnTextStyled = styled(Body2) `\n    text-align: center;\n    color: ${props => props.theme.accentOrange};\n`;\nconst linkToAddress = '';\nconst LinkNftLinked = ({ nft, linkedAddress, isLoading, refetch }) => {\n    const notifyError = useNotification();\n    const { t } = useTranslation();\n    const walletState = useActiveWallet();\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirm) => {\n        setIsOpen(false);\n        if (confirm === true) {\n            refetch();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftLink({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress\n    });\n    const mutation = useLinkNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsLinkAmount),\n        linkToAddress,\n        fee: estimation.data?.payload\n    });\n    const child = () => (_jsxs(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsLinkAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: [_jsx(ConfirmViewTitleSlot, {}), _jsx(ConfirmViewHeadingSlot, {}), _jsxs(ConfirmViewDetailsSlot, { children: [_jsx(ConfirmViewDetailsAmount, {}), _jsx(ConfirmViewDetailsFee, {})] }), _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) })] }));\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const isTME = isTMEDomain(nft.dns);\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    const network = useActiveTonNetwork();\n    const isLinkedWithAnotherWallet = Object.values(isStandardTonWallet(walletState) ? getWalletsAddresses(walletState.publicKey, network) : {}).every(({ address }) => !areEqAddresses(address.toRawString(), linkedAddress));\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { type: \"button\", size: \"large\", secondary: true, fullWidth: true, disabled: isDisabled, loading: estimation.isFetching || isRecipientLoading || isLoading, onClick: onOpen, children: t('nft_unlink_domain_button').replace('{{address}}', toShortValue(formatAddress(linkedAddress, network))) }), isLinkedWithAnotherWallet && !isLoading && (_jsx(WarnTextStyled, { children: isTME\n                    ? t('tme_linked_with_another_address_warn')\n                    : t('dns_linked_with_another_address_warn') })), _jsx(Notification, { title: t('confirm_unlink'), isOpen: isOpen, hideButton: true, handleClose: () => onClose(), backShadow: true, children: child })] }));\n};\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { AssetAmount } from '@tonkeeper/core/dist/entries/crypto/asset/asset-amount';\nimport { TON_ASSET } from '@tonkeeper/core/dist/entries/crypto/asset/constants';\nimport { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport { unShiftedDecimals } from '@tonkeeper/core/dist/utils/balance';\nimport BigNumber from 'bignumber.js';\nimport { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { useToast } from '../../hooks/appSdk';\nimport { useAreNftActionsDisabled } from '../../hooks/blockchain/nft/useAreNftActionsDisabled';\nimport { useEstimateNftRenew } from '../../hooks/blockchain/nft/useEstimateNftRenew';\nimport { useRenewNft } from '../../hooks/blockchain/nft/useRenewNft';\nimport { useTonRecipient } from '../../hooks/blockchain/useTonRecipient';\nimport { toDaysLeft, useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useNotification } from '../../hooks/useNotification';\nimport { useQueryChangeWait } from '../../hooks/useQueryChangeWait';\nimport { useNftDNSExpirationDate } from '../../state/nft';\nimport { Notification } from '../Notification';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { ConfirmView, ConfirmViewButtons, ConfirmViewButtonsSlot } from '../transfer/ConfirmView';\nimport { ConfirmAndCancelMainButton } from '../transfer/common';\nconst RenewDNSBlock = styled.div `\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`;\nconst RenewDNSButton = styled(Button) `\n    margin-bottom: 0.75rem;\n`;\nconst RenewDNSValidUntil = styled(Body2) `\n    color: ${props => (props.danger ? props.theme.accentRed : props.theme.textSecondary)};\n`;\nconst dnsRenewAmount = new BigNumber(0.02);\nconst dnsRenewAssetAmount = AssetAmount.fromRelativeAmount({\n    asset: TON_ASSET,\n    amount: new BigNumber(0.02)\n});\nconst YEAR_MS = 1000 * 60 * 60 * 24 * 366;\nconst intlOptions = { year: 'numeric', hour: undefined, minute: undefined };\nexport const RenewNft = ({ nft }) => {\n    const toast = useToast();\n    const isDisabled = useAreNftActionsDisabled(nft);\n    const notifyError = useNotification();\n    const { t, i18n: { language } } = useTranslation();\n    const rtf = new Intl.RelativeTimeFormat(intlLocale(language), { style: 'long' });\n    const query = useNftDNSExpirationDate(nft);\n    const { data: expirationDate, isLoading: isExpirationInfoLoading } = query;\n    const { refetch: refetchExpirationInfo, isLoading: isWaitingForUpdate, isCompleted } = useQueryChangeWait(query, (current, prev) => {\n        return !!current?.getTime() && current.getTime() !== prev?.getTime();\n    });\n    useEffect(() => {\n        if (isCompleted) {\n            toast(t('renew_nft_renewed'));\n        }\n    }, [isCompleted]);\n    const renewUntilFormatted = useDateFormat(Date.now() + YEAR_MS, intlOptions);\n    const [isOpen, setIsOpen] = useState(false);\n    const onClose = (confirmed) => {\n        setIsOpen(false);\n        if (confirmed) {\n            refetchExpirationInfo();\n        }\n    };\n    const { recipient, isLoading: isRecipientLoading } = useTonRecipient(nft.address);\n    const estimation = useEstimateNftRenew({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsRenewAmount)\n    });\n    const mutation = useRenewNft({\n        nftAddress: nft.address,\n        amount: unShiftedDecimals(dnsRenewAmount),\n        fee: estimation.data?.payload\n    });\n    const onOpen = () => {\n        if (estimation.error) {\n            notifyError(estimation.error);\n            return;\n        }\n        setIsOpen(true);\n    };\n    if (!isExpirationInfoLoading && !expirationDate) {\n        return null;\n    }\n    const child = () => (_jsx(ConfirmView, { onClose: onClose, recipient: recipient, assetAmount: dnsRenewAssetAmount, fitContent: true, estimation: estimation, ...mutation, children: _jsx(ConfirmViewButtonsSlot, { children: _jsx(ConfirmViewButtons, { MainButton: ConfirmAndCancelMainButton }) }) }));\n    const daysLeft = toDaysLeft(expirationDate);\n    return (_jsxs(_Fragment, { children: [_jsxs(RenewDNSBlock, { children: [_jsx(RenewDNSButton, { type: \"button\", disabled: isDisabled || isWaitingForUpdate, loading: isExpirationInfoLoading || estimation.isFetching || isRecipientLoading, onClick: onOpen, size: \"large\", secondary: true, fullWidth: true, children: isWaitingForUpdate\n                            ? t('renew_nft_in_progress')\n                            : t('dns_renew_until_btn').replace('%{untilDate}', renewUntilFormatted) }), daysLeft !== '' && (_jsx(RenewDNSValidUntil, { danger: Number(daysLeft) <= 30, children: t('renew_nft_expiration_date').replace('%1%', rtf.format(Number(daysLeft), 'days')) }))] }), _jsx(Notification, { isOpen: isOpen, hideButton: true, handleClose: () => onClose, backShadow: true, children: child })] }));\n};\n","import { estimateNftRenew } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useEstimateTonFee } from '../useEstimateTonFee';\nexport const useEstimateNftRenew = (args) => {\n    return useEstimateTonFee({ caller: estimateNftRenew, queryKey: ['estimate-nft-renew', args.nftAddress] }, args);\n};\n","import { sendNftRenew } from '@tonkeeper/core/dist/service/transfer/nftService';\nimport { useExecuteTonContract } from '../useExecuteTonContract';\nexport const useRenewNft = (args) => useExecuteTonContract({ executor: sendNftRenew, eventName2: 'renew-dns' }, args);\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { isNFTDNS } from '@tonkeeper/core/dist/entries/nft';\nimport styled from 'styled-components';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useActiveWallet, useIsActiveWalletWatchOnly } from '../../state/wallet';\nimport { Body2 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { LinkNft } from './LinkNft';\nimport { RenewNft } from './RenewNft';\nconst getMarketplaceUrl = (nftItem) => {\n    const { marketplace } = nftItem.metadata;\n    const address = Address.parse(nftItem.address).toString();\n    switch (marketplace) {\n        case 'getgems.io':\n            return `https://getgems.io/nft/${address}`;\n        // TODO: add more\n        default:\n            return `https://getgems.io/nft/${address}`;\n    }\n};\nconst ViewOnMarketButton = ({ url }) => {\n    const { t } = useTranslation();\n    const sdk = useAppSdk();\n    return (_jsx(Button, { size: \"large\", secondary: true, fullWidth: true, onClick: e => {\n            e.preventDefault();\n            e.stopPropagation();\n            sdk.openPage(url);\n        }, children: t('nft_open_in_marketplace') }));\n};\nconst ActionTransfer = ({ nftItem }) => {\n    const sdk = useAppSdk();\n    const { t } = useTranslation();\n    const wallet = useActiveWallet();\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { primary: true, size: \"large\", fullWidth: true, disabled: nftItem.sale !== undefined || nftItem.owner?.address !== wallet.rawAddress, onClick: e => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    sdk.uiEvents.emit('transferNft', { method: 'transferNft', params: nftItem });\n                }, children: t('nft_transfer_nft') }), nftItem.sale && _jsx(DNSSaleText, { children: t('nft_on_sale_text') })] }));\n};\nconst SaleText = styled(Body2) `\n    width: 100%;\n    color: ${props => props.theme.textSecondary};\n`;\nconst DNSSaleText = styled(SaleText) `\n    width: 100%;\n    padding: 0 1rem;\n    text-align: left;\n`;\nexport const NftAction = ({ kind, nftItem }) => {\n    const isReadOnly = useIsActiveWalletWatchOnly();\n    if (isReadOnly) {\n        return (_jsx(_Fragment, { children: _jsx(ViewOnMarketButton, { url: getMarketplaceUrl(nftItem) }) }));\n    }\n    switch (kind) {\n        case 'token': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: getMarketplaceUrl(nftItem) })] }));\n        }\n        case 'ton.dns': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://dns.ton.org/#${nftItem.dns?.slice(0, -4)}` }), isNFTDNS(nftItem) && (_jsxs(_Fragment, { children: [_jsx(LinkNft, { nft: nftItem }), _jsx(RenewNft, { nft: nftItem })] }))] }));\n        }\n        case 'telegram.number': {\n            const numbers = nftItem.metadata.name.replace(/\\s/g, '').slice(1);\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/number/${numbers}` })] }));\n        }\n        case 'telegram.name': {\n            return (_jsxs(_Fragment, { children: [_jsx(ActionTransfer, { nftItem: nftItem }), _jsx(ViewOnMarketButton, { url: `https://fragment.com/username/${nftItem.dns?.slice(0, -5)}` }), isNFTDNS(nftItem) && _jsx(LinkNft, { nft: nftItem })] }));\n        }\n    }\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Address } from '@ton/core';\nimport { formatAddress, toShortValue } from '@tonkeeper/core/dist/utils/common';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useDateFormat } from '../../hooks/dateFormat';\nimport { useTranslation } from '../../hooks/translation';\nimport { useActiveTonNetwork } from '../../state/wallet';\nimport { SpinnerIcon } from '../Icon';\nimport { ListBlock, ListItem, ListItemPayload } from '../List';\nimport { Body1, H3, Label1 } from '../Text';\nimport { useNftDNSExpirationDate, useNftItemData } from '../../state/nft';\nconst Block = styled.div `\n    width: 100%;\n`;\nconst Row = styled.div `\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 0.625rem;\n`;\nconst Link = styled(Label1) `\n    cursor: pointer;\n    color: ${props => props.theme.textAccent};\n`;\nconst RightText = styled(Body1) `\n    color: ${props => props.theme.textSecondary};\n`;\nexport const NftDetails = React.memo(({ nftItem }) => {\n    const { t } = useTranslation();\n    const { data } = useNftItemData(nftItem.address);\n    const { data: expirationDate, isLoading: isExpirationDateLoading } = useNftDNSExpirationDate(nftItem);\n    const expirationDateFormatted = useDateFormat(expirationDate, {\n        year: 'numeric',\n        hour: undefined,\n        minute: undefined\n    });\n    const item = data ?? nftItem;\n    const sdk = useAppSdk();\n    const { config } = useAppContext();\n    const owner = item.owner?.address;\n    const address = Address.parse(item.address).toString();\n    const network = useActiveTonNetwork();\n    const url = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    const nftAddress = formatAddress(address, network, true);\n    return (_jsxs(Block, { children: [_jsxs(Row, { children: [_jsx(H3, { children: t('nft_details') }), _jsx(Link, { onClick: () => sdk.openPage(url.replace('%s', address)), children: t('nft_view_in_explorer') })] }), _jsxs(ListBlock, { margin: false, children: [owner && (_jsx(ListItem, { onClick: () => sdk.copyToClipboard(formatAddress(owner, network)), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_owner_address') }), _jsx(Label1, { children: toShortValue(formatAddress(owner, network)) })] }) })), !!(expirationDate || isExpirationDateLoading) && (_jsx(ListItem, { hover: false, children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('dns_expiration_date') }), expirationDate ? (_jsx(Label1, { children: expirationDateFormatted })) : (_jsx(SpinnerIcon, {}))] }) })), _jsx(ListItem, { onClick: () => sdk.copyToClipboard(nftAddress), children: _jsxs(ListItemPayload, { children: [_jsx(RightText, { children: t('nft_contract_address') }), _jsx(Label1, { children: toShortValue(nftAddress) })] }) })] })] }));\n});\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { TrustType } from '@tonkeeper/core/dist/tonApiV2';\nimport { useMemo, useRef } from 'react';\nimport styled from 'styled-components';\nimport { useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { useTranslation } from '../../hooks/translation';\nimport { useDisclosure } from '../../hooks/useDisclosure';\nimport { useHideNft, useMarkNftAsSpam, useMarkNftAsTrusted, useNftCollectionData } from '../../state/nft';\nimport { useActiveTonWalletConfig } from '../../state/wallet';\nimport { DropDown } from '../DropDown';\nimport { BlockIcon, ChevronDownIcon, EllipsisIcon, EyeDisableIcon, GlobeIcon, InfoCircleIcon, VerificationIcon } from '../Icon';\nimport { ListBlock, ListItemElement, ListItemPayload } from '../List';\nimport { NotificationBlock, NotificationTitleBlock } from '../Notification';\nimport { Body2, H2, H3, Label1, Label4 } from '../Text';\nimport { Button } from '../fields/Button';\nimport { RoundedButton } from '../fields/RoundedButton';\nimport { Body, CroppedBodyText } from '../jettons/CroppedText';\nimport { NftAction } from './NftAction';\nimport { NftDetails } from './NftDetails';\nimport { Image, NftBlock } from './Nfts';\nimport { UnverifiedNftNotification } from './UnverifiedNftNotification';\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.875rem 1rem;\n`;\nconst Delimiter = styled.div `\n    border-top: 1px solid ${props => props.theme.separatorCommon};\n`;\nconst CollectionTitle = styled(Label1) `\n    margin-bottom: 0.5rem;\n`;\nconst Icon = styled.span `\n    position: relative;\n    top: 3px;\n    margin-left: 4px;\n`;\nexport const TonDnsRootCollectionAddress = '0:b774d95eb20543f186c06b371ab88ad704f7e256130caf96189368a7d0cb6ccf';\nexport const TelegramUsernamesCollectionAddress = '0:80d78a35f955a14b679faa887ff4cd5bfc0f43b4a4eea2a7e6927f3701b273c2';\nexport const TelegramNumbersCollectionAddress = '0:0e41dc1dc3c9067ed24248580e12b3359818d83dee0304fabcf80845eafafdb2';\nexport const GetGemsDnsCollectionAddress = '0:e1955aba7249f23e4fd2086654a176516d98b134e0df701302677c037c358b17';\nexport const KnownNFTDnsCollections = [\n    TonDnsRootCollectionAddress,\n    TelegramNumbersCollectionAddress,\n    TelegramUsernamesCollectionAddress,\n    GetGemsDnsCollectionAddress\n];\nconst Title = styled(H2) `\n    word-break: break-word;\n\n    user-select: none;\n`;\nconst SaleBlock = styled(Label4) `\n    color: ${props => props.theme.textSecondary};\n    border: 1px solid ${props => props.theme.buttonTertiaryBackground};\n    border-radius: 6px;\n    padding: 3.5px 6px 4.5px;\n    text-transform: uppercase;\n\n    position: relative;\n    top: -3px;\n\n    white-space: nowrap;\n`;\nconst UnverifiedLabel = styled(Body2) `\n    color: ${props => (props.isTrusted ? props.theme.textSecondary : props.theme.accentOrange)};\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n`;\nconst NftNameContainer = styled.div `\n    text-align: center;\n`;\nconst ButtonsBlock = styled.div `\n    display: flex;\n    gap: 8px;\n    width: 100%;\n\n    > * {\n        flex: 1;\n    }\n`;\nconst DropDownWrapper = styled.div `\n    .drop-down-container {\n        z-index: 100;\n        top: calc(100% + 12px);\n        right: 0;\n    }\n`;\nconst ListBlockStyled = styled(ListBlock) `\n    margin: 0;\n\n    svg {\n        color: ${p => p.theme.accentBlue};\n    }\n`;\nexport const NftPreview = ({ onClose, nftItem }) => {\n    const { mutateAsync: markNftAsSpam, isLoading: markNftAsSpamLoading } = useMarkNftAsSpam();\n    const { mutate: markNftAsTrusted, isLoading: markNftAsTrustedLoading } = useMarkNftAsTrusted();\n    const { mutateAsync: hideNft } = useHideNft();\n    const { data } = useActiveTonWalletConfig();\n    const isSuspicious = nftItem.trust !== TrustType.Whitelist;\n    const isTrusted = !!data?.trustedNfts.includes(nftItem.collection?.address || nftItem.address);\n    const ref = useRef(null);\n    const { t } = useTranslation();\n    const { data: collection } = useNftCollectionData(nftItem);\n    const { description } = nftItem.metadata;\n    const name = nftItem.dns ?? nftItem.metadata.name;\n    const itemKind = useMemo(() => {\n        switch (nftItem.collection?.address) {\n            case TonDnsRootCollectionAddress:\n                return 'ton.dns';\n            case TelegramUsernamesCollectionAddress:\n                return 'telegram.name';\n            case TelegramNumbersCollectionAddress:\n                return 'telegram.number';\n            default:\n                return 'token';\n        }\n    }, [nftItem]);\n    const collectionName = nftItem?.collection?.name;\n    const image = nftItem.previews?.find(item => item.resolution === '1500x1500');\n    const { isOpen: isSpamModalOpen, onClose: onCloseSpamModal, onOpen: onOpenSpamModal } = useDisclosure();\n    const handleCloseSpamModal = (action) => {\n        if (action === 'mark_spam') {\n            markNftAsSpam(nftItem).then(onClose);\n        }\n        else if (action === 'mark_trusted') {\n            markNftAsTrusted(nftItem);\n        }\n        onCloseSpamModal();\n    };\n    const { config } = useAppContext();\n    const sdk = useAppSdk();\n    const explorerUrl = config.NFTOnExplorerUrl ?? 'https://tonviewer.com/nft/%s';\n    return (_jsxs(NotificationBlock, { children: [onClose && (_jsxs(NotificationTitleBlock, { children: [_jsx(RoundedButton, { onClick: onClose, children: _jsx(ChevronDownIcon, {}) }), _jsxs(NftNameContainer, { children: [_jsx(H3, { children: nftItem.dns ?? nftItem.metadata.name }), isSuspicious && (_jsxs(UnverifiedLabel, { isTrusted: isTrusted, onClick: onOpenSpamModal, children: [t('suspicious_label_full'), \"\\u00A0\", _jsx(InfoCircleIcon, { color: isTrusted ? 'textSecondary' : 'accentOrange' })] }))] }), _jsx(UnverifiedNftNotification, { isOpen: isSpamModalOpen, onClose: handleCloseSpamModal, isTrusted: isTrusted }), _jsx(DropDownWrapper, { children: _jsx(DropDown, { containerClassName: \"drop-down-container\", payload: closeDropDown => (_jsxs(ListBlockStyled, { children: [_jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            hideNft(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_nft') }), _jsx(EyeDisableIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => {\n                                            closeDropDown();\n                                            markNftAsSpam(nftItem).then(onClose);\n                                        }, children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_hide_and_report') }), _jsx(BlockIcon, {})] }) }), _jsx(ListItemElement, { onClick: () => sdk.openPage(explorerUrl.replace('%s', nftItem.address)), children: _jsxs(ListItemPayload, { children: [_jsx(Label1, { children: t('nft_actions_view_on_explorer') }), _jsx(GlobeIcon, {})] }) })] })), children: _jsx(RoundedButton, { children: _jsx(EllipsisIcon, {}) }) }) })] })), isSuspicious && !isTrusted && (_jsxs(ButtonsBlock, { children: [_jsx(Button, { warn: true, type: \"button\", onClick: () => markNftAsSpam(nftItem).then(onClose), loading: markNftAsSpamLoading, children: t('suspicious_buttons_report') }), _jsx(Button, { type: \"button\", onClick: () => markNftAsTrusted(nftItem), loading: markNftAsTrustedLoading, children: t('suspicious_buttons_not_spam') })] })), _jsxs(NftBlock, { children: [image && _jsx(Image, { ref: ref, url: image.url }), _jsxs(Text, { children: [_jsxs(Title, { children: [name, nftItem.sale && (_jsxs(_Fragment, { children: ['  ', _jsx(SaleBlock, { children: t('nft_on_sale') })] }))] }), collectionName && (_jsxs(Body, { open: true, margin: \"small\", children: [collectionName, nftItem.approvedBy && nftItem.approvedBy.length > 0 && (_jsx(Icon, { children: _jsx(VerificationIcon, {}) }))] })), description && (_jsx(CroppedBodyText, { text: description, margin: \"last\", contentColor: true }))] }), collection && collection.metadata?.description && (_jsxs(_Fragment, { children: [_jsx(Delimiter, {}), _jsxs(Text, { children: [_jsx(CollectionTitle, { children: t('nft_about_collection') }), _jsx(CroppedBodyText, { text: collection.metadata.description, margin: \"last\", contentColor: true })] })] }))] }), _jsx(NftAction, { nftItem: nftItem, kind: itemKind }), _jsx(NftDetails, { nftItem: nftItem, kind: itemKind })] }));\n};\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { Notification } from '../Notification';\nimport { NftPreview } from './NftView';\nconst NftNotification = () => {\n    const sdk = useAppSdk();\n    const [nftItem, setNft] = useState(undefined);\n    const handleClose = useCallback(() => {\n        setNft(undefined);\n    }, [setNft]);\n    useEffect(() => {\n        const handler = (options) => {\n            setNft(options.params);\n        };\n        sdk.uiEvents.on('nft', handler);\n        return () => {\n            sdk.uiEvents.off('nft', handler);\n        };\n    }, [sdk, setNft]);\n    const Content = useCallback(() => {\n        if (!nftItem)\n            return undefined;\n        return _jsx(NftPreview, { onClose: handleClose, nftItem: nftItem });\n    }, [nftItem, handleClose]);\n    return (_jsx(Notification, { isOpen: nftItem !== undefined, hideButton: true, handleClose: handleClose, backShadow: true, children: Content }));\n};\nexport default NftNotification;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport React, { useContext, useLayoutEffect, useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { AppSelectionContext, useAppContext } from '../../hooks/appContext';\nimport { useAppSdk } from '../../hooks/appSdk';\nimport { toDaysLeft } from '../../hooks/dateFormat';\nimport { FireBadgeIcon, SaleIcon } from '../Icon';\nimport { NftCollectionBody3, NftHeaderLabel2 } from './NftHeader';\nimport { useNftDNSExpirationDate } from \"../../state/nft\";\nconst Grid = styled.div `\n    display: grid;\n    margin: 0 0 2rem 0;\n    gap: 0.5rem;\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n`;\nexport const NftBlock = styled.div `\n    position: relative;\n    user-select: none;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n\n    background-color: ${props => props.theme.backgroundContent};\n    transition: background-color 0.1s ease;\n\n    border-radius: ${props => props.theme.cornerSmall};\n\n    overflow: hidden;\n\n    ${props => {\n    if (props.ios) {\n        if (props.isHover) {\n            return css `\n                    background-color: ${props.theme.backgroundContentTint};\n                `;\n        }\n    }\n    else {\n        if (!props.hover) {\n            return undefined;\n        }\n        else {\n            return css `\n                    cursor: pointer;\n\n                    &:hover {\n                        background-color: ${props.theme.backgroundContentTint};\n                    }\n                `;\n        }\n    }\n}}\n`;\nconst ImageContainer = styled.div `\n    width: 100%;\n    position: relative;\n`;\nexport const Image = styled.div `\n    width: 100%;\n    padding-bottom: 100%;\n\n    ${props => props.url &&\n    css `\n            background-image: url('${props.url}');\n        `}\n    background-size: cover;\n`;\nconst Text = styled.div `\n    display: flex;\n    flex-direction: column;\n    padding: 0.5rem 0.75rem 0.5rem;\n    white-space: nowrap;\n`;\nconst SaleBlock = styled.div `\n    position: absolute;\n    top: 10px;\n    right: 8px;\n`;\nconst ExpiringBlock = styled.div `\n    position: absolute;\n    bottom: 0;\n    right: 0;\n    height: 32px;\n    width: 32px;\n`;\nexport const NftItemView = React.memo(({ nft, resolution, onOpen }) => {\n    const isSale = nft.sale !== undefined;\n    const image = nft.previews?.find(item => item.resolution === resolution);\n    const { ios } = useAppContext();\n    const [isHover, setHover] = useState(false);\n    const ref = useRef(null);\n    const selection = useContext(AppSelectionContext);\n    const { data: expirationDate } = useNftDNSExpirationDate(nft);\n    useLayoutEffect(() => {\n        if (ref.current && selection && ref.current.contains(selection)) {\n            setHover(true);\n        }\n        else {\n            setHover(false);\n        }\n    }, [ref.current, selection, setHover]);\n    const isExpiring = expirationDate && Number(toDaysLeft(expirationDate)) <= 30;\n    return (_jsxs(NftBlock, { hover: true, isHover: isHover, ios: ios, ref: ref, onClick: () => onOpen(nft), children: [_jsxs(ImageContainer, { children: [_jsx(Image, { url: image?.url }), isSale && (_jsx(SaleBlock, { children: _jsx(SaleIcon, {}) })), isExpiring && (_jsx(ExpiringBlock, { children: _jsx(FireBadgeIcon, {}) }))] }), _jsxs(Text, { children: [_jsx(NftHeaderLabel2, { nft: nft }), _jsx(NftCollectionBody3, { nft: nft })] })] }));\n});\nexport const NftsList = ({ nfts, className }) => {\n    const sdk = useAppSdk();\n    return (_jsx(Grid, { className: className, children: (nfts ?? []).map(item => {\n            if (item.metadata?.render_type === 'hidden') {\n                return _jsx(_Fragment, {});\n            }\n            return (_jsx(NftItemView, { nft: item, resolution: \"500x500\", onOpen: () => sdk.openNft(item) }, item.address));\n        }) }));\n};\n","import { intlLocale } from '@tonkeeper/core/dist/entries/language';\nimport { useMemo } from 'react';\nimport { useTranslation } from './translation';\nexport function useDateFormat(date, options) {\n    const { i18n } = useTranslation();\n    return useMemo(() => {\n        if (!date) {\n            return '';\n        }\n        return new Intl.DateTimeFormat(intlLocale(i18n.language), {\n            month: 'short',\n            day: 'numeric',\n            year: new Date().getFullYear() - 1 === new Date(date).getFullYear()\n                ? 'numeric'\n                : undefined,\n            hour: 'numeric',\n            minute: 'numeric',\n            ...options\n        }).format(date);\n    }, [date, i18n.language, options]);\n}\nexport function toDaysLeft(date) {\n    if (!date) {\n        return '';\n    }\n    const days = Math.floor((new Date(date).getTime() - Date.now()) / (1000 * 60 * 60 * 24));\n    if (days < 0) {\n        return '0';\n    }\n    return days.toString();\n}\n"],"names":["isNFTDNS","nft","dns","useAreNftActionsDisabled","_nft$owner","wallet","useActiveWallet","undefined","sale","seeIfAddressEqual","rawAddress","owner","address","useEstimateTonFee","_ref","args","caller","queryKey","options","api","useAppContext","account","useActiveAccount","useQuery","async","isAccountTonWalletStandard","Error","boc","walletState","activeTonWallet","event","EmulationApi","tonApiV2","emulateMessageToWallet","emulateMessageToWalletRequest","fee","AssetAmount","asset","TON_ASSET","weiAmount","extra","payload","useEstimateNftLink","estimateNftLink","nftAddress","linkToAddress","useExecuteTonContract","executor","eventName2","t","useTranslation","sdk","useAppSdk","client","useQueryClient","track2","useTransactionAnalytics","mutateAsync","checkTouchId","useCheckTouchId","invalidateAccountQueries","useInvalidateActiveWalletQueries","useMutation","signer","getSigner","id","catch","e","notifyError","invalidateQueries","useLinkNft","sendNftLink","useTonRecipient","network","useActiveTonNetwork","isFirstRender","useRef","isLoading","data","toAccount","mutate","mutateRecipient","useGetToAccount","useEffect","current","recipient","useMemo","formatAddress","blockchain","BLOCKCHAIN_NAME","TON","comment","done","useNotification","useQueryChangeWait","query","shouldExit","setIsLoading","useState","isCompleted","setIsCompleted","dispose","setDispose","prev","waitRecursive","result","refetch","setTimeout","timeLimit","arguments","length","LinkNft","_data$wallet","toast","useToast","useNftDNSLinkData","linkedAddress","isWaitingForUpdate","_prev$wallet","_current$wallet","_jsx","LinkNftLinked","LinkNftUnlinked","ReplaceButton","styled","Body2","_templateObject","_taggedTemplateLiteral","props","isDisabled","theme","textSecondary","textAccent","dnsLinkAmount","BigNumber","dnsLinkAssetAmount","fromRelativeAmount","amount","_ref2","_estimation$data","openedView","setOpenedView","setLinkToAddress","onClose","confirm","isRecipientLoading","refetchEstimateFee","estimation","unShiftedDecimals","onSaveLinkToAddress","useCallback","mutation","isSelectedCurrentAddress","areEqAddresses","chooseWalletChild","LinkNFTWalletView","onSave","isFetching","domain","isTME","isTMEDomain","_jsxs","_Fragment","children","Button","type","size","secondary","fullWidth","disabled","loading","onClick","onOpen","error","Notification","title","isOpen","hideButton","handleClose","backShadow","confirmChild","ConfirmView","assetAmount","fitContent","ConfirmViewTitleSlot","ConfirmViewHeadingSlot","ConfirmViewDetailsSlot","ListItem","hover","ListItemPayload","Label","ColumnText","right","text","toShortValue","ConfirmViewDetailsAmount","ConfirmViewDetailsFee","ConfirmViewButtonsSlot","ConfirmViewButtons","MainButton","ConfirmAndCancelMainButton","WalletLabelStyled","Body1","_templateObject2","ChangeWalletContainerStyled","NotificationBlock","_templateObject3","_ref3","inputValue","setInputValue","wasSubmitted","setWasSubmitted","isInputValid","Address","parse","onSubmit","stopPropagation","preventDefault","toRawString","err","console","replace","Input","isValid","value","onChange","label","clearButton","Gap","primary","WarnTextStyled","_templateObject4","accentOrange","_ref4","_estimation$data2","setIsOpen","isLinkedWithAnotherWallet","Object","values","isStandardTonWallet","getWalletsAddresses","publicKey","every","_ref5","child","RenewDNSBlock","div","RenewDNSButton","RenewDNSValidUntil","danger","accentRed","dnsRenewAmount","dnsRenewAssetAmount","intlOptions","year","hour","minute","RenewNft","i18n","language","rtf","Intl","RelativeTimeFormat","intlLocale","style","useNftDNSExpirationDate","expirationDate","isExpirationInfoLoading","refetchExpirationInfo","getTime","renewUntilFormatted","useDateFormat","Date","now","confirmed","estimateNftRenew","sendNftRenew","useRenewNft","daysLeft","toDaysLeft","Number","format","getMarketplaceUrl","nftItem","marketplace","metadata","toString","concat","ViewOnMarketButton","url","openPage","ActionTransfer","_nftItem$owner","uiEvents","emit","method","params","DNSSaleText","SaleText","NftAction","kind","useIsActiveWalletWatchOnly","_nftItem$dns","slice","numbers","name","_nftItem$dns2","Block","Row","Link","Label1","RightText","NftDetails","React","_item$owner","_config$NFTOnExplorer","useNftItemData","isExpirationDateLoading","expirationDateFormatted","item","config","NFTOnExplorerUrl","H3","ListBlock","margin","copyToClipboard","SpinnerIcon","Text","Delimiter","separatorCommon","CollectionTitle","Icon","span","TonDnsRootCollectionAddress","TelegramUsernamesCollectionAddress","TelegramNumbersCollectionAddress","Title","H2","_templateObject5","SaleBlock","Label4","_templateObject6","buttonTertiaryBackground","UnverifiedLabel","_templateObject7","isTrusted","NftNameContainer","_templateObject8","ButtonsBlock","_templateObject9","DropDownWrapper","_templateObject10","ListBlockStyled","_templateObject11","p","accentBlue","NftPreview","_nftItem$collection","_nftItem$collection3","_nftItem$previews","_collection$metadata","markNftAsSpam","markNftAsSpamLoading","useMarkNftAsSpam","markNftAsTrusted","markNftAsTrustedLoading","useMarkNftAsTrusted","hideNft","useHideNft","useActiveTonWalletConfig","isSuspicious","trust","TrustType","Whitelist","trustedNfts","includes","collection","ref","useNftCollectionData","description","itemKind","_nftItem$collection2","collectionName","image","previews","find","resolution","isSpamModalOpen","onCloseSpamModal","onOpenSpamModal","useDisclosure","explorerUrl","NotificationTitleBlock","RoundedButton","ChevronDownIcon","InfoCircleIcon","color","UnverifiedNftNotification","action","then","DropDown","containerClassName","closeDropDown","ListItemElement","EyeDisableIcon","BlockIcon","GlobeIcon","EllipsisIcon","warn","NftBlock","Image","Body","open","approvedBy","VerificationIcon","CroppedBodyText","contentColor","NftNotification","setNft","handler","on","off","Content","Grid","backgroundContent","cornerSmall","ios","isHover","css","backgroundContentTint","ImageContainer","ExpiringBlock","NftItemView","_nft$previews","isSale","setHover","selection","useContext","AppSelectionContext","useLayoutEffect","contains","isExpiring","SaleIcon","FireBadgeIcon","NftHeaderLabel2","NftCollectionBody3","NftsList","nfts","className","map","_item$metadata","render_type","openNft","date","DateTimeFormat","month","day","getFullYear","days","Math","floor"],"sourceRoot":""}